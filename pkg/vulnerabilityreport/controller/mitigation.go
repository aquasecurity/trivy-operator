package controller

import (
	"github.com/aquasecurity/trivy-operator/pkg/apis/aquasecurity/v1alpha1"
	"github.com/aquasecurity/trivy-operator/pkg/plugins/trivy"
	"github.com/goark/go-cvss/v3/metric"
	"github.com/google/cel-go/cel"
)

type Mitigation struct {
	Message string `yaml:"message"`
	Matcher string `yaml:"matcher"`
}

func GetMitigationMessage(mitigations []Mitigation, registry v1alpha1.Registry, artifact v1alpha1.Artifact, vulnerability v1alpha1.Vulnerability) (string, error) {
	env, err := cel.NewEnv(
		cel.Variable("RegistryServer", cel.StringType),
		cel.Variable("ArtifactRepository", cel.StringType),
		cel.Variable("VulnerabilityID", cel.StringType),
		cel.Variable("Resource", cel.StringType),
		cel.Variable("Severity", cel.StringType),
		cel.Variable("Target", cel.StringType),
		cel.Variable("Class", cel.StringType),
		cel.Variable("PackageType", cel.StringType),
		cel.Variable("CVSSScore", cel.DoubleType),
		cel.Variable("CVSSAV", cel.StringType),
		cel.Variable("CVSSAC", cel.StringType),
		cel.Variable("CVSSPR", cel.StringType),
		cel.Variable("CVSSUI", cel.StringType),
		cel.Variable("CVSSS", cel.StringType),
		cel.Variable("CVSSC", cel.StringType),
		cel.Variable("CVSSI", cel.StringType),
		cel.Variable("CVSSA", cel.StringType),
	)
	if err != nil {
		return "", err
	}

	for _, mitigation := range mitigations {
		ast, issues := env.Compile(mitigation.Matcher)
		if issues != nil && issues.Err() != nil {
			return "", issues.Err()
		}
		prg, err := env.Program(ast)
		if err != nil {
			return "", err
		}

		cvss := trivy.GetCvssV3(vulnerability.CVSS)
		cvssScorePointer := trivy.GetScoreFromCVSS(cvss)
		cvssScore := 0.0
		if cvssScorePointer != nil {
			cvssScore = *cvssScorePointer
		}

		cvssVectorPointer := trivy.GetVectorFromCVSS(cvss)
		var cvssBaseMetricPointer *metric.Base
		if cvssVectorPointer != nil {
			bm, err := metric.NewBase().Decode(*cvssVectorPointer)
			if err == nil && bm.Ver != metric.VUnknown {
				cvssBaseMetricPointer = bm
			}
		}
		cvssAV := ""
		if cvssBaseMetricPointer != nil {
			cvssAV = cvssBaseMetricPointer.AV.String()
		}
		cvssAC := ""
		if cvssBaseMetricPointer != nil {
			cvssAC = cvssBaseMetricPointer.AC.String()
		}
		cvssPR := ""
		if cvssBaseMetricPointer != nil {
			cvssPR = cvssBaseMetricPointer.PR.String()
		}
		cvssUI := ""
		if cvssBaseMetricPointer != nil {
			cvssUI = cvssBaseMetricPointer.UI.String()
		}

		cvssS := ""
		if cvssBaseMetricPointer != nil {
			cvssS = cvssBaseMetricPointer.S.String()
		}
		cvssC := ""
		if cvssBaseMetricPointer != nil {
			cvssC = cvssBaseMetricPointer.C.String()
		}
		cvssI := ""
		if cvssBaseMetricPointer != nil {
			cvssI = cvssBaseMetricPointer.I.String()
		}
		cvssA := ""
		if cvssBaseMetricPointer != nil {
			cvssA = cvssBaseMetricPointer.A.String()
		}

		envMap := map[string]interface{}{
			"RegistryServer":     registry.Server,
			"ArtifactRepository": artifact.Repository,
			"VulnerabilityID":    vulnerability.VulnerabilityID,
			"Resource":           vulnerability.Resource,
			"Severity":           string(vulnerability.Severity),
			"Target":             vulnerability.Target,
			"Class":              vulnerability.Class,
			"PackageType":        vulnerability.PackageType,
			"CVSSScore":          cvssScore,
			"CVSSAV":             cvssAV,
			"CVSSAC":             cvssAC,
			"CVSSPR":             cvssPR,
			"CVSSUI":             cvssUI,
			"CVSSS":              cvssS,
			"CVSSC":              cvssC,
			"CVSSI":              cvssI,
			"CVSSA":              cvssA,
		}
		out, _, err := prg.Eval(envMap)
		if err != nil {
			return "", err
		}
		if out.Value() == true {
			return mitigation.Message, nil
		}
	}

	return "", nil
}
