package controller

import (
	"fmt"
	"testing"
	"time"

	"github.com/bluele/gcache"
	"github.com/stretchr/testify/assert"
)

func TestServerHealthCheck(t *testing.T) {
	testCases := []struct {
		name             string
		expiratin        time.Duration
		httpChecker      HttpChecker
		cache            gcache.Cache
		numAccessToCache int
		wait             time.Duration
		want             bool
	}{
		{
			name:             "initial cache is empty server is responding update cache",
			expiratin:        time.Second,
			httpChecker:      &dummyHttpServer{err: nil},
			cache:            gcache.New(1).LRU().Build(),
			want:             true,
			numAccessToCache: 1,
			wait:             time.Second * 0,
		},
		{
			name:             "server is responding read from cache",
			expiratin:        time.Second,
			httpChecker:      &dummyHttpServer{err: nil},
			cache:            gcache.New(1).LRU().Build(),
			want:             true,
			numAccessToCache: 2,
			wait:             time.Second * 0,
		},
		{
			name:             "cache expire check with server",
			expiratin:        time.Second,
			httpChecker:      &dummyHttpServer{err: nil},
			cache:            gcache.New(1).LRU().Build(),
			want:             true,
			numAccessToCache: 2,
			wait:             time.Second * 3,
		},
		{
			name:             "server is not responding",
			expiratin:        time.Second,
			httpChecker:      &dummyHttpServer{err: fmt.Errorf("server is not avaliable")},
			cache:            gcache.New(1).LRU().Build(),
			want:             false,
			numAccessToCache: 1,
			wait:             time.Second * 0,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			for i := 0; i < tc.numAccessToCache; i++ {
				//nolint:gosec
				tsr := NewTrivyServerChecker(&tc.expiratin, tc.cache, tc.httpChecker)
				got, err := tsr.TrivyServerAvaliable("serverURL")
				assert.NoError(t, err)
				assert.Equal(t, tc.want, got)
				time.Sleep(tc.wait)
			}
		})
	}
}

type dummyHttpServer struct {
	err error
}

func (dhs dummyHttpServer) ServerHealthy(serverURL string) error {
	return dhs.err
}
