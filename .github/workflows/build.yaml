---
# This workflow is triggered on push or pull request for the main branch.
# It runs tests and various checks to validate that the proposed changes
# will not introduce any regression after merging the code to the main branch.
name: Build
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/*.md'
      - '*.md'
      - 'docs/**'
      - 'mkdocs.yml'
      - 'LICENSE'
      - 'NOTICE'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/*.md'
      - '*.md'
      - 'docs/**'
      - 'mkdocs.yml'
      - 'LICENSE'
      - 'NOTICE'

env:
  GO_VERSION: "1.18"
  KIND_VERSION: "v0.11.1"
  KIND_IMAGE: "kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6"
  KUTTL_VERSION: "0.12.1"

# Disable permissions granted to the GITHUB_TOKEN for all the available scopes.
permissions: {}

# Cancel any in-flight jobs for the same PR branch so there's only one active at a time.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify-code:
    name: Verify code
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cached Go dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Verify Go code
        uses: golangci/golangci-lint-action@v3.2.0
        with:
          args: --verbose
          version: latest
          skip-pkg-cache: true
          skip-build-cache: true
      - name: Verify YAML code
        uses: ibiqlik/action-yamllint@v3
      - name: Vendor Go modules
        run: go mod vendor
      - name: Verify all generated
        run: make verify-generated
  tests:
    name: Run tests
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run unit tests
        run: make test
      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.txt
  e2e-tests:
    name: Run e2e tests / Trivy Operator
    needs:
      - tests
      - verify-code
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Kubernetes cluster (KIND)
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
      - name: Test connection to Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl describe node
      - name: Deploy Trivy operator
        run: make deploy
        env:
          KUBECONFIG: /home/runner/.kube/config
      - name: Setup kuttl
        uses: supplypike/setup-bin@v1
        with:
          uri: https://github.com/kudobuilder/kuttl/releases/download/v${{ env.KUTTL_VERSION }}/kubectl-kuttl_${{ env.KUTTL_VERSION }}_linux_x86_64
          name: kubectl-kuttl
          version: ${{ env.KUTTL_VERSION }}
      - name: Run e2e-tests
        run: make e2e-test
        env:
          KUBECONFIG: /home/runner/.kube/config
  test-helm-chart:
    if: "false"  # TODO It's broken on a release candidate PRs because it's using container image that has not been released yet.
    name: Test Helm Chart
    needs:
      - e2e-tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Helm
        uses: azure/setup-helm@18bc76811624f360dbd7f18c2d4ecb32c7b87bab  # v1.1
        with:
          version: v3.5.0
      - name: Set up python
        uses: actions/setup-python@c4e89fac7e8767b327bbad6cb4d859eda999cf08  # v2.3.0
        with:
          python-version: 3.7
      - name: Setup Chart Linting
        id: lint
        uses: helm/chart-testing-action@dae259e86a35ff09145c0805e2d7dd3f7207064a  # v2.1.0
      - name: Setup Kubernetes cluster (KIND)
        uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d  # v1.2.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
      - name: Run chart-testing
        run: ct lint-and-install --validate-maintainers=false --charts deploy/helm
