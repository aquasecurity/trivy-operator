package vulnerabilityreport_test

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	. "github.com/tenstad/dyqual"

	"path"
	"time"

	"github.com/aquasecurity/trivy-operator/pkg/kube"
	appsv1 "k8s.io/api/apps/v1"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

var _ = Describe("Workload controller", func() {
	const (
		WorkloadNamespace = "default"

		timeout  = time.Second * 10
		interval = time.Millisecond * 250
	)

	var testdataResourceDir = path.Join("testdata", "fixture")

	NormalizeUntestableScanJobFields := func(job *batchv1.Job) *batchv1.Job {
		job.APIVersion = "batch/v1"
		job.Kind = string(kube.KindJob)
		job.UID = ""
		job.ResourceVersion = ""
		job.CreationTimestamp = metav1.Time{}
		job.ManagedFields = nil
		job.Spec.Selector.MatchLabels["controller-uid"] = "<CONTROLLER-UID>"
		job.Spec.Template.Labels["controller-uid"] = "<CONTROLLER-UID>"
		for i := range job.Spec.Template.Spec.InitContainers {
			job.Spec.Template.Spec.InitContainers[i].Name = "<INIT-CONTAINER-NAME>"
		}
		return job
	}

	DescribeTable("When creating workload",
		func(workload client.Object, workloadResourceFile string, expectedScanJobResourceFile string) {
			Expect(loadResource(workload, path.Join(testdataResourceDir, workloadResourceFile))).Should(Succeed())
			workload.SetNamespace(WorkloadNamespace)
			Expect(k8sClient.Create(ctx, workload)).Should(Succeed())

			expectedJob := &batchv1.Job{}
			Expect(loadResource(expectedJob, path.Join(testdataResourceDir, expectedScanJobResourceFile))).Should(Succeed())
			expectedJob.Namespace = WorkloadNamespace

			jobLookupKey := client.ObjectKeyFromObject(expectedJob)
			createdJob := &batchv1.Job{}

			// We'll need to retry getting this newly created Job, given that creation may not immediately happen.
			Eventually(func() error {
				return k8sClient.Get(ctx, jobLookupKey, createdJob)
			}, timeout, interval).Should(Succeed())

			Expect(createdJob).Should(WithTransform(NormalizeUntestableScanJobFields, Dyqual(expectedJob)))
		},
		Entry("Should create a scan Job for CronJob", &batchv1.CronJob{}, "cronjob.yaml", "cronjob-expected-scan.yaml"),
		Entry("Should create a scan Job for DaemonSet", &appsv1.DaemonSet{}, "daemonset.yaml", "daemonset-expected-scan.yaml"),
		Entry("Should create a scan Job for Job", &batchv1.Job{}, "job.yaml", "job-expected-scan.yaml"),
		Entry("Should create a scan Job for Pod", &corev1.Pod{}, "pod.yaml", "pod-expected-scan.yaml"),
		Entry("Should create a scan Job for ReplicaSet", &appsv1.ReplicaSet{}, "replicaset.yaml", "replicaset-expected-scan.yaml"),
		Entry("Should create a scan Job for ReplicationController", &corev1.ReplicationController{}, "replicationcontroller.yaml", "replicationcontroller-expected-scan.yaml"),
		Entry("Should create a scan Job for StatefulSet", &appsv1.StatefulSet{}, "statefulset.yaml", "statefulset-expected-scan.yaml"),
	)
})
