// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	http "net/http"

	aquasecurityv1alpha1 "github.com/aquasecurity/trivy-operator/pkg/apis/aquasecurity/v1alpha1"
	scheme "github.com/aquasecurity/trivy-operator/pkg/clientset/scheme"
	rest "k8s.io/client-go/rest"
)

type AquasecurityV1alpha1Interface interface {
	RESTClient() rest.Interface
	ClusterComplianceReportsGetter
	ClusterConfigAuditReportsGetter
	ClusterInfraAssessmentReportsGetter
	ClusterRbacAssessmentReportsGetter
	ClusterSbomReportsGetter
	ClusterVulnerabilityReportsGetter
	ConfigAuditReportsGetter
	ExposedSecretReportsGetter
	InfraAssessmentReportsGetter
	RbacAssessmentReportsGetter
	SbomReportsGetter
	VulnerabilityReportsGetter
}

// AquasecurityV1alpha1Client is used to interact with features provided by the aquasecurity.github.io group.
type AquasecurityV1alpha1Client struct {
	restClient rest.Interface
}

func (c *AquasecurityV1alpha1Client) ClusterComplianceReports(namespace string) ClusterComplianceReportInterface {
	return newClusterComplianceReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ClusterConfigAuditReports(namespace string) ClusterConfigAuditReportInterface {
	return newClusterConfigAuditReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ClusterInfraAssessmentReports(namespace string) ClusterInfraAssessmentReportInterface {
	return newClusterInfraAssessmentReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ClusterRbacAssessmentReports(namespace string) ClusterRbacAssessmentReportInterface {
	return newClusterRbacAssessmentReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ClusterSbomReports(namespace string) ClusterSbomReportInterface {
	return newClusterSbomReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ClusterVulnerabilityReports(namespace string) ClusterVulnerabilityReportInterface {
	return newClusterVulnerabilityReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ConfigAuditReports(namespace string) ConfigAuditReportInterface {
	return newConfigAuditReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) ExposedSecretReports(namespace string) ExposedSecretReportInterface {
	return newExposedSecretReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) InfraAssessmentReports(namespace string) InfraAssessmentReportInterface {
	return newInfraAssessmentReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) RbacAssessmentReports(namespace string) RbacAssessmentReportInterface {
	return newRbacAssessmentReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) SbomReports(namespace string) SbomReportInterface {
	return newSbomReports(c, namespace)
}

func (c *AquasecurityV1alpha1Client) VulnerabilityReports(namespace string) VulnerabilityReportInterface {
	return newVulnerabilityReports(c, namespace)
}

// NewForConfig creates a new AquasecurityV1alpha1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*AquasecurityV1alpha1Client, error) {
	config := *c
	setConfigDefaults(&config)
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new AquasecurityV1alpha1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*AquasecurityV1alpha1Client, error) {
	config := *c
	setConfigDefaults(&config)
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &AquasecurityV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new AquasecurityV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *AquasecurityV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new AquasecurityV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *AquasecurityV1alpha1Client {
	return &AquasecurityV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) {
	gv := aquasecurityv1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = rest.CodecFactoryForGeneratedClient(scheme.Scheme, scheme.Codecs).WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *AquasecurityV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
